#!/usr/bin/env/python

"""
    remove_uris.py: General tool for removing entities from VIVO.  Given a
    list of URIs to remove (typically generated by a query), generate the
    RDF needed to remove all triples with the URI as a subject or object.

    NOTE: Use of remove_uri may create data integrity probles in the VIVO
    triple store.  remove_uri is provided as a means for quickly removing
    large numbers of URIs and their related assertions.  It does just that.
    It should be used as part of a comprehensive data management activity
    to identify and correct data integrity problems in a VIVO triple store.

    Version 0.1 2014-06-22 MC
    --  Initial version.  Works as expected.
"""

__author__ = "Michael Conlon"
__copyright__ = "Copyright 2014, University of Florida"
__license__ = "BSD 3-Clause license"
__version__ = "0.1"

from datetime import datetime
import sys
from vivotools import read_csv
from vivotools import remove_uri
from vivotools import rdf_header
from vivotools import rdf_footer
import codecs
import operator

# Start here

srdf = ""
log_file = sys.stdout
print >>log_file, datetime.now(), "Start"
uris = read_csv("remove_uris.txt")
print >>log_file, datetime.now(), len(uris), "URIs to remove"

# For each URI, call remove_uri to generate RDF

report = {}
for row in uris.values():
    uri = row['uri']
    sub = remove_uri(uri)
    report[uri] = len(sub)
    srdf = srdf + sub

# Print report

print >>log_file, datetime.now(), "URI", "RDF size"
for uri,size in sorted(report.iteritems(), key=operator.itemgetter(1), reverse=True):
    print >>log_file, datetime.now(), uri, size

# Write the RDF to a file, accounting for Unicode

sub_file = codecs.open("sub.rdf", mode="w", encoding="ascii",
                      errors = "xmlcharrefreplace")
sub_file.write(rdf_header())
sub_file.write(srdf)
sub_file.write(rdf_footer())
sub_file.close()

print >>log_file, datetime.now(), "Finish"

